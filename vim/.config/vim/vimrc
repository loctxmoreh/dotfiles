"
" .vimrc
"

" First thing first,
set nocompatible
filetype plugin on
syntax on

set runtimepath^=$XDG_CONFIG_HOME/vim
set runtimepath+=$XDG_DATA_HOME/vim
set runtimepath+=$XDG_CONFIG_HOME/vim/after

set packpath^=$XDG_DATA_HOME/vim,$XDG_CONFIG_HOME/vim
set packpath+=$XDG_CONFIG_HOME/vim/after,$XDG_DATA_HOME/vim/after

let g:netrw_home = $XDG_DATA_HOME."/vim"
call mkdir($XDG_DATA_HOME."/vim/spell", 'p')
set viewdir=$XDG_DATA_HOME/vim/view | call mkdir(&viewdir, 'p')

set backupdir=$XDG_CACHE_HOME/vim/backup | call mkdir(&backupdir, 'p')
set directory=$XDG_CACHE_HOME/vim/swap   | call mkdir(&directory, 'p')
set undodir=$XDG_CACHE_HOME/vim/undo     | call mkdir(&undodir,   'p')

if !has('nvim') | set viminfofile=$XDG_CACHE_HOME/vim/viminfo | endif

let mapleader="\<Space>"

call plug#begin()

" colorschemes
Plug 'safv12/andromeda.vim'
Plug 'tomasr/molokai'
Plug 'sonph/onehalf', {'rtp': 'vim/'}
Plug 'dracula/vim', {'as': 'dracula'}
Plug 'jnurmine/Zenburn'
Plug 'sjl/badwolf'

" Fugitive, a git wrapper
Plug 'tpope/vim-fugitive'

" Directory tree
Plug 'scrooloose/nerdtree'

" Fuzzy search
Plug 'kien/ctrlp.vim'

" status bar
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Code auto-comment
Plug 'preservim/nerdcommenter'

" Python syntax highlighting
Plug 'vim-python/python-syntax'

call plug#end()


" General settings
set number              " show line number
set relativenumber      " relative number line
set showcmd             " show command in bottom bar
set cursorline          " highlight current line
set cursorcolumn        " highlight current column
filetype indent on      " load filetype-specific indent file
set lazyredraw          " redraw only when need to
set showmatch           " highlight matching brackets

set tabstop=4           " number of visual spaces per tab
set softtabstop=4       " number of space in tab when editing
set shiftwidth=4
set smartindent
set smarttab            " insert/delete n spaces for tab
set autoindent
set expandtab           " tabs are spaces

set incsearch           " search as characters are entered
set nohlsearch          " not highlight matches in search
set noerrorbells

set nowrap
set scrolloff=8

set signcolumn=yes
set colorcolumn=80

set encoding=utf-8

set background=dark
colorscheme molokai
let g:molokai_original = 1

set splitbelow
set splitright

set laststatus=2
set t_Co=256

" set theme for status line
let g:airline_theme='powerlineish'

" python with virtualenv support
"py3 << EOF
"import os
"import sys
"if 'VIRTUAL_ENV' in os.environ:
"    env_base_dir = os.environ['VIRTUAL_ENV']
"    activate_this = os.path.join(env_base_dir, 'bin/activate_this.py')
"    exec(open(activate_this).read(), dict(__file__=activate_this))
"EOF


" Keybindings

" Source .vimrc
nnoremap <Leader>sv :source $MYVIMRC<CR>

" Alias write and write-quit
nnoremap <Leader>q :wq<CR>
nnoremap <Leader>w :w<CR>

" Open splits
nnoremap <Leader>u :split<CR>
nnoremap <Leader>o :vsplit<CR>

" Toggle between two most-recent buffers
nnoremap <Leader><Tab> <C-^>

" Move visual line
nnoremap j gj
nnoremap k gk

" Navigating splits
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Make Y behavior consistent with others
nnoremap Y y$

" Access system clipboard, Ctrl+Alt+C and Ctrl+Alt+V to copy and paste
set clipboard+=unnamedplus
vnoremap <C-M-c> "+y
nnoremap <C-M-v> "+P

" Automatically deletes all trailing whitespaces and newlines at end of file
" on save
autocmd BufWritePre * %s/\s\+$//e
autocmd BufWritePre * %s/\n\+\%$//e
autocmd BufWritePre *.[ch] %s/\%$/\r/e

" Python-syntax plugin
let g:python_highlight_all = 1

" Enable autocompletion
set wildmenu
set wildmode=longest,list,full
set completeopt=menuone,longest

" Minimalist-TabComplete-Plugin
inoremap <expr> <Tab> TabComplete()
fun! TabComplete()
    if getline('.')[col('.') - 2] =~ '\K' || pumvisible()
        return "\<C-P>"
    else
        return "\<Tab>"
    endif
endfun

" Minimalist-AutoCompletePop-Plugin
set completeopt=menu,menuone,noinsert
inoremap <expr> <CR> pumvisible() ? "\<C-Y>" : "\<CR>"
autocmd InsertCharPre * call AutoComplete()
fun! AutoComplete()
    if v:char =~ '\K'
        \ && getline('.')[col('.') - 4] !~ '\K'
        \ && getline('.')[col('.') - 3] =~ '\K'
        \ && getline('.')[col('.') - 2] =~ '\K' " last char
        \ && getline('.')[col('.') - 1] !~ '\K'

        call feedkeys("\<C-P>", 'n')
    end
endfun

" set linewrap in markdown and latex file
autocmd BufRead,BufNewFile *.md,*.tex set wrap
